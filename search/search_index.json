{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"inteliver Introduction","text":""},{"location":"#what-is-inteliver","title":"What is Inteliver?","text":"<p>Inteliver is an open-source alternative to Cloudinary.</p> <p>It is an image management platform offering programmable media solutions.</p> <p>Inteliver allows for real-time image modifications and customizations, ensuring that your media assets are tailored to meet specific needs efficiently and effectively.</p>"},{"location":"#watch-introduction-video-in-youtube","title":"Watch Introduction Video in Youtube","text":"inteliver Introduction Video"},{"location":"#browse-documentation","title":"Browse Documentation","text":"<ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>inteliver</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It just Works</p> <p>Focus on your core idea and inteliver does all the asset management for you</p> <p> How inteliver works?</p> </li> <li> <p> Real-Time Image Modification</p> <p>Apply all sorts of image modification on the fly tailored to your client</p> <p> Examples</p> </li> <li> <p> Open Source, MIT</p> <p>inteliver is licensed under MIT and available on GitHub</p> <p> License</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>Inteliver's Programmable Media is a software-as-a-service (SaaS) solution designed for developers. Programmable Media provides APIs that enable the automation of the entire lifecycle of your image and video assets. Here are the key functional areas:</p>"},{"location":"#image-uploading","title":"\ud83d\udce4 Image Uploading","text":"<p>Securely upload images to Inteliver's cloud storage. Support for various file formats and large file sizes.</p>"},{"location":"#media-management","title":"\ud83d\udcc2 Media Management","text":"<p>Organize and manage your media assets with ease. Tagging, categorizing, and searching functionality.</p>"},{"location":"#real-time-modifications","title":"\ud83d\udee0\ufe0f Real-time Modifications","text":"<p>Apply transformations such as resizing, cropping, and filtering on the fly. Use AI-powered features for advanced modifications.</p>"},{"location":"#delivery-and-optimization","title":"\ud83d\ude80 Delivery and Optimization","text":"<p>Fast and reliable delivery of media assets through a global CDN. Optimize images for different devices and network conditions.</p>"},{"location":"#analytics-and-reporting","title":"\ud83d\udcca Analytics and Reporting","text":"<p>Monitor usage and performance with detailed analytics. Generate reports to gain insights into media asset usage. By leveraging these APIs, developers can automate workflows, enhance user experiences, and ensure optimal performance of media assets.</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#api-reference","title":"API Reference","text":"<p>Complete API reference for image management service and each operation and selection arguments.</p> <p>Note</p> <p>Inteliver API is in Beta Version.</p>"},{"location":"api-reference/blur/","title":"Blur","text":""},{"location":"api-reference/blur/#blur-operation","title":"Blur Operation","text":"Command Details i_o_blur_{value} Blur the image with respect to the value. Value can be an integer between 0 and 100. The args value to this modifier will specify the intensiveness of the blur operation. <p>Tip</p> <p>The default behaviour of the blur image effect is to apply the blur function on the whole image. </p> <p>Tip</p> <p>Setting the selection window before blur operation will result in bluring only the selection window. </p>"},{"location":"api-reference/compression/","title":"Compression","text":""},{"location":"api-reference/compression/#jpeg-compression","title":"JPEG Compression","text":"Command Details i_o_format_jpg_{ratio} Compress image with JPEG comression. The ratio specify the compression ratio. Ratio is an integer between 0 and 100 where 0 is the most compression ratio whereas 100 is the best quality image."},{"location":"api-reference/compression/#png-compression","title":"PNG Compression","text":"Command Details i_o_format_png Compress and change the image format to PNG image format."},{"location":"api-reference/compression/#webp-compression","title":"WEBP Compression","text":"Command Details i_o_format_webp Compress and change the image format to WEBP image format."},{"location":"api-reference/crop/","title":"Crop","text":""},{"location":"api-reference/crop/#crop-operation","title":"Crop Operation","text":"Command Details i_o_crop Crop the image according to the selection window. i_o_rcrop Crop the image according to the selection window while rounding the corners."},{"location":"api-reference/flip/","title":"Flip","text":""},{"location":"api-reference/flip/#flip-operation","title":"Flip Operation","text":"Command Details i_o_flip_v Flip the image vertically. i_o_flip_h Flip the image horizontally. i_o_flip_b Flip the image  both horizontally and vertically."},{"location":"api-reference/gray-scale/","title":"Gray Scale","text":""},{"location":"api-reference/gray-scale/#grayscale-operation","title":"Grayscale Operation","text":"Command Details i_o_gray Make the image grayscale. Tip <p>The default behaviour of the grayscale image effect is to apply the grayscale function on the whole image. </p> Tip <p>Setting the selection window before grayscale operation will result in applying the grayscale effect only on the selection window. </p>"},{"location":"api-reference/object-detection/","title":"Object Detection","text":""},{"location":"api-reference/object-detection/#object-detection","title":"Object Detection","text":"Command Details i_o_detect Detect all the objects in the image and return the image with rectangles around each object."},{"location":"api-reference/object-detection/#object-classes","title":"Object Classes","text":"Command Details i_c_object_person Set the selection rectangle to persons present in image. i_c_object_bicycle Set the selection rectangle to bicycle objects present in image. i_c_object_car Set the selection rectangle to car objects present in image. i_c_object_motorbike Set the selection rectangle to motorcycles objects present in image. i_c_object_aeroplane Set the selection rectangle to airplanes objects present in image. i_c_object_bus Set the selection rectangle to bus objects present in image. i_c_object_train Set the selection rectangle to train objects present in image. i_c_object_truck Set the selection rectangle to truck objects present in image. i_c_object_boat Set the selection rectangle to boat objects present in image. i_c_object_trafficlight Set the selection rectangle to traffic light objects present in image. i_c_object_firehydrant Set the selection rectangle to fire hydrant objects present in image. i_c_object_stopsign Set the selection rectangle to stop signs objects present in image. i_c_object_parkingmeter Set the selection rectangle to parking meter objects present in image. i_c_object_bench Set the selection rectangle to bench objects present in image. i_c_object_bird Set the selection rectangle to birds present in image. i_c_object_cat Set the selection rectangle to cats present in image. i_c_object_dog Set the selection rectangle to dogs present in image. i_c_object_horse Set the selection rectangle to horses present in image. i_c_object_sheep Set the selection rectangle to sheeps present in image. i_c_object_cow Set the selection rectangle to cows present in image. i_c_object_elephant Set the selection rectangle to elephants present in image. i_c_object_bear Set the selection rectangle to bears present in image. i_c_object_zebra Set the selection rectangle to zebras present in image. i_c_object_giraffe Set the selection rectangle to giraffes present in image. i_c_object_backpack Set the selection rectangle to backpack objects present in image. i_c_object_umbrella Set the selection rectangle to umbrella objects present in image. i_c_object_handbag Set the selection rectangle to handbag objects present in image. i_c_object_tie Set the selection rectangle to tie objects present in image. i_c_object_suitcase Set the selection rectangle to suitcase objects present in image. i_c_object_frisbee Set the selection rectangle to frisbee objects present in image. i_c_object_skis Set the selection rectangle to skis objects present in image. i_c_object_snowboard Set the selection rectangle to snowboard objects present in image. i_c_object_sportsball Set the selection rectangle to sportsball objects present in image. i_c_object_kite Set the selection rectangle to kite objects present in image. i_c_object_baseballbat Set the selection rectangle to baseball bat objects present in image. i_c_object_baseballglove Set the selection rectangle to baseball glove objects present in image. i_c_object_skateboard Set the selection rectangle to skateboard objects present in image. i_c_object_surfboard Set the selection rectangle to surfboard objects present in image. i_c_object_tennisracket Set the selection rectangle to tennis racket objects present in image. i_c_object_bottle Set the selection rectangle to bottle objects present in image. i_c_object_wineglass Set the selection rectangle to wineglass objects present in image. i_c_object_cup Set the selection rectangle to cup objects present in image. i_c_object_fork Set the selection rectangle to fork objects present in image. i_c_object_knife Set the selection rectangle to knife objects present in image. i_c_object_spoon Set the selection rectangle to spoon objects present in image. i_c_object_bowl Set the selection rectangle to bowl objects present in image. i_c_object_banana Set the selection rectangle to banana objects present in image. i_c_object_apple Set the selection rectangle to apple objects present in image. i_c_object_sandwich Set the selection rectangle to sandwich objects present in image. i_c_object_orange Set the selection rectangle to orange objects present in image. i_c_object_broccoli Set the selection rectangle to broccoli objects present in image. i_c_object_carrot Set the selection rectangle to carrot objects present in image. i_c_object_hotdog Set the selection rectangle to hotdog objects present in image. i_c_object_pizza Set the selection rectangle to pizza objects present in image. i_c_object_donut Set the selection rectangle to donut objects present in image. i_c_object_cake Set the selection rectangle to cake objects present in image. i_c_object_chair Set the selection rectangle to chair objects present in image. i_c_object_sofa Set the selection rectangle to sofa objects present in image. i_c_object_pottedplant Set the selection rectangle to potted plant objects present in image. i_c_object_bed Set the selection rectangle to bed objects present in image. i_c_object_diningtable Set the selection rectangle to dinning table objects present in image. i_c_object_toilet Set the selection rectangle to toilet objects present in image. i_c_object_tvmonitor Set the selection rectangle to tv monitor objects present in image. i_c_object_laptop Set the selection rectangle to laptop objects present in image. i_c_object_mouse Set the selection rectangle to mouse objects present in image. i_c_object_remote Set the selection rectangle to remote controller objects present in image. i_c_object_keyboard Set the selection rectangle to keyboard objects present in image. i_c_object_cellphone Set the selection rectangle to cellphone objects present in image. i_c_object_microwave Set the selection rectangle to microwave objects present in image. i_c_object_oven Set the selection rectangle to oven objects present in image. i_c_object_toaster Set the selection rectangle to toaster objects present in image. i_c_object_sink Set the selection rectangle to sink objects present in image. i_c_object_refrigerator Set the selection rectangle to refrigerator objects present in image. i_c_object_book Set the selection rectangle to book objects present in image. i_c_object_clock Set the selection rectangle to clock objects present in image. i_c_object_vase Set the selection rectangle to vase objects present in image. i_c_object_scissors Set the selection rectangle to scissors objects present in image. i_c_object_teddybear Set the selection rectangle to teddybear objects present in image. i_c_object_hairdrier Set the selection rectangle to hairdrier objects present in image. i_c_object_toothbrush Set the selection rectangle to toothbrush objects present in image."},{"location":"api-reference/operation/","title":"Operation","text":""},{"location":"api-reference/operation/#operation-separators","title":"Operation Separators","text":"Separator Details , Separate different commands in a single operation. / Separate different operations in a operation command chain."},{"location":"api-reference/pixelate/","title":"Pixelate","text":""},{"location":"api-reference/pixelate/#pixelate-operation","title":"Pixelate Operation","text":"Command Details i_o_pixelate_{value} Pixelate the image with respect to the value. Value can be an integer between 0 and 20. The args value to this modifier will specify the intensiveness of the pixelate operation. Tip <p>The default behaviour of the pixelate image effect is to apply the pixelate function on the whole image. </p> Tip <p>Setting the selection window before pixelate operation will result in pixelating only the selection window. </p>"},{"location":"api-reference/resize/","title":"Resize","text":""},{"location":"api-reference/resize/#resize-operation","title":"Resize Operation","text":"Command Details i_o_resize Resize the image according to the selection window. i_o_resize_keep Resize the image according to the selection window while keeping the original image ratio."},{"location":"api-reference/rotate/","title":"Rotate","text":""},{"location":"api-reference/rotate/#rotate-operation","title":"Rotate Operation","text":"Command Details i_o_rotate_{degree} Rotate the image with respect to the degree which is the degree of rotation. degree is an integer between 0 and 360. Positive values mean counter-clockwise rotation (the coordinate origin is assumed to be the top-left corner). i_o_rotate_{degree}_{scale} Rotate the image with the specified degree and also apply the isotropic scale factor to the rotation. Rotation scale is an integer between 0 and 10. <p>Tip</p> <p>Default pivot point is the center of the image.</p> <p>Tip</p> <p>Setting the center before the rotation operation will rotate the image with respect to the new center as pivot point.</p>"},{"location":"api-reference/selection/","title":"Selection","text":""},{"location":"api-reference/selection/#window-selection","title":"Window Selection","text":"Command Details i_c_x_{value} Set the value of X-dimension for the center point of the selection rectangle. e.g. i_c_x_100 will set the center point X-value to 100. Value can be an integer and in pixels or it can be in [0, 1] range float number which is interpreted as percentage of the original image size. i_c_y_{value} Set the value of Y-dimension for the center point of the selection rectangle. e.g. i_c_y_100 will set the center point Y-value to 100. Value can be an integer and in pixels or it can be in [0, 1] range float number which is interpreted as percentage of the original image size. i_h_{value} Set the height of the selection rectangle. e.g. i_h_200 will set the selection rectangle height to 200 pixels. Value can be an integer and in pixels or it can be in [0, 1] range float number which is interpreted as percentage of the original image size.       i_w_{value} Set the width of the selection rectangle. e.g. i_w_200 will set the selection rectangle width to 200 pixels. Value can be an integer and in pixels or it can be in [0, 1] range float number which is interpreted as percentage of the original image size.      i_h_ih Set the height of the selection rectangle to image height.      i_w_iw Set the width of the selection rectangle to image width."},{"location":"api-reference/selection/#face-selection","title":"Face Selection","text":"Command Details i_c_face Set the selection rectangle to the most focused face. i_c_face_{value} Set the selection rectangle to the n`th face present in the image. The face number automatically asigned according to the focusness of that specefic face and starting from zero. e.g. i_c_face_2 will select the third face in the image."},{"location":"api-reference/selection/#object-selection","title":"Object Selection","text":"Command Details i_c_object_{value} Set the selection rectangle to the object specified by the value. e.g. i_c_object_car will set the selection rectangle around the car objects in the image. Info <p>The list of objects we detect are documented in object detection API reference.</p>"},{"location":"api-reference/sharpen/","title":"Sharpen","text":""},{"location":"api-reference/sharpen/#sharpen-operation","title":"Sharpen Operation","text":"Command Details i_o_sharpen Enhance and sharpen the image. Tip <p>The default behaviour of the sharpen image effect is to apply the sharpen function on the whole image. </p> Tip <p>Setting the selection window before sharpen operation will result in sharpening only the selection window. </p>"},{"location":"api-reference/text-overlay/","title":"Text Overlay","text":""},{"location":"api-reference/text-overlay/#textoverlay-operation","title":"Textoverlay Operation","text":"Command Details i_o_text_{text}_{scale}_{font}_{red}_{green}_{blue} Put text overlay on the image. Args Details {text} The text you want to put on the image. {scale} The scale of the text. A float value. {font} The font code. Integer value between 1 and 7. {red} The red value in RGB color system. Integer between 0 and 255 {green} The green value in RGB color system. Integer between 0 and 255 {blue} The blue value in RGB color system. Integer between 0 and 255 Tip <p>Setting the center before the text overlay operation will indicate the position of the text on the image.</p>"},{"location":"examples/","title":"Image Management Examples","text":"<p>This section is dedicated to examples of different image modifications.</p>"},{"location":"examples/blur/","title":"Blur","text":"<p>Here are some examples for blur operation on-the-fly.</p>"},{"location":"examples/blur/#original-image","title":"Original Image","text":""},{"location":"examples/blur/#simple-blur","title":"Simple Blur","text":"<p>Using the <code>i_o_blur</code> url command modifier you can blur your images on-the-fly. The args value to this modifier will specify the intensiveness of the blur operation.</p> <p>Here are the original image with blur modification with 10 and 40 as intensiveness values. </p> <p><pre><code>i_o_blur_10\n</code></pre> </p> <p><pre><code>i_o_blur_40\n</code></pre> </p>"},{"location":"examples/blur/#manual-selection-blur","title":"Manual Selection Blur","text":"<p>The default behaviour of the blur image effect is to apply the blur function on the whole image. However you can select specific region to apply blur effect.</p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of the rectangle and using <code>i_h</code> and <code>i_w</code> you can specify the height and width of the region you want to apply blur effect. In this example we set the center of blur effect to (275, 275) and the rectangle dimension is (75, 75).</p> <p><pre><code>i_c_x_275,i_c_y_275,i_h_75,i_w_75,i_o_blur_25\n</code></pre> </p>"},{"location":"examples/blur/#multi-selection-blur","title":"Multi-Selection Blur","text":""},{"location":"examples/blur/#original-image_1","title":"Original Image","text":""},{"location":"examples/blur/#multi-selection","title":"Multi-Selection","text":"<p>Using Inteliver command chain you can apply effects multiple times using <code>/</code> separator. With the help of this feature you can blur multiple regions.</p> <p>Here, in the first part of the command chain we will blur a rectangle and in the second part we blur the face.</p> <p><pre><code>i_c_x_280,i_c_y_50,i_h_100,i_w_100,i_o_blur_25/i_c_face,i_o_blur_21\n</code></pre> </p>"},{"location":"examples/blur/#face-blur","title":"Face Blur","text":"<p>You can blur faces in your images using face selector and blur operation command.</p> <p><pre><code>i_c_face,i_o_blur_20\n</code></pre> </p>"},{"location":"examples/blur/#objects-blur","title":"Objects Blur","text":"<p>Using Inteliver A.I. object detection feature you can select different objects in your images and then blur them out.</p> <p>In this example, by using object selector <code>i_c_object_person</code> we will blur the person in the image.</p> <p><pre><code>i_c_object_person,i_o_blur_20\n</code></pre> </p> <p>And we can also blur the car in the image.</p> <p><pre><code>i_c_object_truck,i_o_blur_20\n</code></pre> </p> <p>Or by using the command chain feature we can blur out the persons and cars in the image.</p> <pre><code>i_c_object_truck,i_o_blur_20/i_c_object_person,i_o_blur_20\n</code></pre> <p></p> <p>Info</p> <p>You can lookup the object detection API reference to see all the objects we detect in images.</p>"},{"location":"examples/compression/","title":"Compression","text":""},{"location":"examples/compression/#image-compression-formats","title":"Image Compression Formats","text":"<p>Here are some examples for image compression on-the-fly with size comparison before and after compression.</p>"},{"location":"examples/compression/#jpeg","title":"JPEG","text":"<p>JPEG is a lossy image compression algorithm, which means that JPEG affects the visual precision of the compressed image. In Inteliver JPEG compression API, you can set the compression level (image quality) from a range of [0, 100]. </p> <p>Level zero result in a very small image size while affecting the visual precision alot. Level one hundred will result in the best quality image with biggest size.</p> Original ImageLevel: 80Level: 40Level: 20"},{"location":"examples/compression/#original-image","title":"Original Image","text":"<pre><code>No Compression\n</code></pre> <p>Original Image Size: 111 KB</p>"},{"location":"examples/compression/#jpeg-compression-quality-level-80","title":"JPEG Compression (Quality Level: 80)","text":"<p><pre><code>i_o_format_jpg_80\n</code></pre> </p> <p>Compressed Image Size: 27.4 KB Compression Ratio: ~4x</p>"},{"location":"examples/compression/#jpeg-compression-quality-level-40","title":"JPEG Compression (Quality Level: 40)","text":"<p><pre><code>i_o_format_jpg_40\n</code></pre> </p> <p>Compressed Image Size: 14.1 KB Compression Ratio: ~8x</p>"},{"location":"examples/compression/#jpeg-compression-quality-level-20","title":"JPEG Compression (Quality Level: 20)","text":"<p><pre><code>i_o_format_jpg_20\n</code></pre> </p> <p>Compressed Image Size: 9.3 KB Compression Ratio: ~12x</p>"},{"location":"examples/compression/#webp","title":"WEBP","text":"<p>Webp is a lossy image compression algorithm, which means that Webp affects the visual precision of the compressed image. In Inteliver Webp compression API, you can set the compression level (image quality) from a range of [0, 100]. </p> <p>Level zero result in a very small image size while affecting the visual precision alot. Level one hundred will result in the best quality image with biggest size.</p> Original ImageLevel: 80Level: 40Level: 20"},{"location":"examples/compression/#original-image_1","title":"Original Image","text":"<pre><code>No Compression\n</code></pre> <p>Original Image Size: 111 KB</p>"},{"location":"examples/compression/#webp-compression-quality-level-80","title":"WEBP Compression (Quality Level: 80)","text":"<p><pre><code>i_o_format_webp_80\n</code></pre> </p> <p>Compressed Image Size: 20.2 KB Compression Ratio: ~5x</p>"},{"location":"examples/compression/#webp-compression-quality-level-40","title":"WEBP Compression (Quality Level: 40)","text":"<p><pre><code>i_o_format_webp_40\n</code></pre> </p> <p>Compressed Image Size: 10.6 KB Compression Ratio: ~10x</p>"},{"location":"examples/compression/#webp-compression-quality-level-20","title":"WEBP Compression (Quality Level: 20)","text":"<p><pre><code>i_o_format_webp_20\n</code></pre> </p> <p>Compressed Image Size: 7 KB Compression Ratio: ~15x</p>"},{"location":"examples/compression/#png","title":"PNG","text":"<p>PNG is a lossless image compression algorithm. The PNG compression will not affect the visual precision of the image and after decoding the compressed image is identical to the original one. Hoewever, the compression level is a trade-off between file size and encoding/decoding speed. </p> <p>In Inteliver PNG compression API, you can set the compression level from a range of [1, 9] where level-1 produces the biggest file size and fastest decoding mode and level-9 result in the samllest file size with the slowest decoding time.</p> Original ImageLevel: 1Level: 6Level: 9"},{"location":"examples/compression/#original-image_2","title":"Original Image","text":"<pre><code>No Compression\n</code></pre> <p>Original Image Size: 303 KB</p>"},{"location":"examples/compression/#png-compression-level-1","title":"PNG Compression Level: 1","text":"<p><pre><code>i_o_format_png_1\n</code></pre> </p> <p>Compressed Image Size: 303 KB Compression Ratio: 1x</p>"},{"location":"examples/compression/#png-compression-level-6","title":"PNG Compression Level: 6","text":"<p><pre><code>i_o_format_png_6\n</code></pre> </p> <p>Compressed Image Size: 274 KB Compression Ratio: 1.1x</p>"},{"location":"examples/compression/#png-compression-level-9","title":"PNG Compression Level: 9","text":"<p><pre><code>i_o_format_png_9\n</code></pre> </p> <p>Compressed Image Size: 267 KB Compression Ratio: ~1.2x</p>"},{"location":"examples/crop/","title":"Crop","text":"<p>Here are some examples for crop operation on-the-fly.</p>"},{"location":"examples/crop/#original-image","title":"Original Image","text":""},{"location":"examples/crop/#simple-crop","title":"Simple Crop","text":"<p>Let's say we want to crop the image to 300 pixels by 300 pixels. Here is the url command to do that. The center of the image will be used as the center for crop operation in this example.</p> <p>Using <code>i_h_300</code> and <code>i_w_300</code> will set the requested size and <code>i_o_crop</code> will specify the crop operation.</p> <p><pre><code>i_h_300,i_w_300,i_o_crop\n</code></pre> </p>"},{"location":"examples/crop/#change-center","title":"Change Center","text":"<p>As mentioned in the previous example, the default crop operation will crop the image based on the center of the image.</p> <p>Using center selectors you can change this default. <code>i_c_x</code> and <code>i_c_y</code> will set the X and Y of the desired center for crop operation. Top left corner of the image is (0, 0). In this example we set the center of the image to be (400, 250).</p> <pre><code>i_c_x_400,i_c_y_250,i_h_300,i_w_300,i_o_crop\n</code></pre> <p></p>"},{"location":"examples/crop/#center-on-objects","title":"Center on Objects","text":"<p>Using our A.I. object detection features you can set the center of crop operation on objects presents in your image. Using <code>i_c_object</code> and the name of the object we can set the center on a specific object.</p> <p>In this example lets say we want to crop the truck image. We are using center selector <code>i_c_object_truck</code> to achive this.</p> <pre><code>i_c_object_truck,i_h_250,i_w_250,i_o_crop\n</code></pre> <p></p> <p>We can also crop the image based on the person in it. Using center selector <code>i_c_object_person</code> will do the trick.</p> <pre><code>i_c_object_person,i_h_200,i_w_200,i_o_crop\n</code></pre> <p></p> <p>Info</p> <p>You can lookup the object detection API reference to see all the objects we detect in images.</p>"},{"location":"examples/crop/#round-crop","title":"Round Crop","text":"<p>It is also possible to crop the image in a round style. Using <code>i_o_rcrop</code> operator will crop the image in a round style. Here are some of the examples with round crop.</p> <pre><code>i_h_300,i_w_300,i_o_crop,i_o_rcrop\n</code></pre> <p></p> <p>Adding a PNG format conversion will transparent the corners for better desing.</p> <pre><code>i_h_300,i_w_300,i_o_crop,i_o_rcrop,i_o_format_png\n</code></pre> <p></p> <p>Note</p> <p>Please note if you are specifying args for crop operation you have to first crop the image using <code>i_o_crop</code> operation and then style it with a round crop using <code>i_o_rcrop</code>.</p> <p>And here is the result of setting the center of the image on the truck and round crop it with PNG format. </p> <pre><code>i_c_object_truck,i_h_250,i_w_250,i_o_crop,i_o_rcrop,i_o_format_png\n</code></pre> <p></p>"},{"location":"examples/crop/#face-crop","title":"Face Crop","text":"<p>Using Inteliver A.I. face detection feature, you can also set the center of the crop on the faces detected in the image.</p>"},{"location":"examples/crop/#original-image_1","title":"Original Image","text":""},{"location":"examples/crop/#simple-face-crop","title":"Simple Face Crop","text":"<p>Using <code>i_c_face</code> selector you can set the center of the crop on the face.</p> <pre><code>i_c_face,i_h_200,i_w_200,i_o_crop\n</code></pre> <p></p>"},{"location":"examples/crop/#rounded-face-crop","title":"Rounded Face Crop","text":"<p>Combining round crop and PNG format conversion with centering the crop operation on face will result in an automatic profile picture.</p> <p><pre><code>i_c_face,i_h_200,i_w_200,i_o_crop,i_o_rcrop,i_o_format_png\n</code></pre> </p>"},{"location":"examples/flip/","title":"Flip","text":"<p>Here are some examples for flip operation on-the-fly.</p>"},{"location":"examples/flip/#original-image","title":"Original Image","text":""},{"location":"examples/flip/#vertical-flip","title":"Vertical Flip","text":"<p>Using <code>i_o_flip_v</code> url command modifier you can flip your images vertically.</p> <p><pre><code>i_o_flip_v\n</code></pre> </p>"},{"location":"examples/flip/#horizontal-flip","title":"Horizontal Flip","text":"<p>Using <code>i_o_flip_h</code> url command modifier you can flip your images horizontally.</p> <p><pre><code>i_o_flip_h\n</code></pre> </p>"},{"location":"examples/flip/#bi-directional-flip","title":"Bi-Directional Flip","text":"<p>Using <code>i_o_flip_b</code> url command modifier you can flip your images both horizontally and vertically.</p> <p><pre><code>i_o_flip_b\n</code></pre> </p>"},{"location":"examples/gray-scale/","title":"Grayscale","text":"<p>Here are some examples for making an image grayscale on-the-fly.</p>"},{"location":"examples/gray-scale/#original-image","title":"Original Image","text":""},{"location":"examples/gray-scale/#default-grayscale","title":"Default Grayscale","text":"<p>Using the <code>i_o_gray</code> url command modifier you can make your images grayscale on-the-fly.</p> <pre><code>i_o_gray\n</code></pre> <p></p>"},{"location":"examples/gray-scale/#manual-selection-grayscale","title":"Manual Selection Grayscale","text":"<p>The default behaviour of the grayscale effect is to apply the grayscale function on the whole image. However you can select specific region to make it grayscale.</p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of the rectangle and using <code>i_h</code> and <code>i_w</code> you can specify the height and width of the region you want to make grayscale. In this example we set the center of grayscale effect to (100, 300) and the rectangle dimension is (200, 200).</p> <p>When comparing to the original image you see that the bus ad banner is now grayscaled.</p> <p><pre><code>i_c_x_100,i_c_y_300,i_h_200,i_w_200,i_o_gray\n</code></pre> </p>"},{"location":"examples/gray-scale/#objects-grayscale","title":"Objects Grayscale","text":"<p>Using Inteliver A.I. object detection feature you can select different objects in your images and then grayscale them.</p> <p>In this example, by using object selector <code>i_c_object_car</code> we will only make the car in the image grayscale.</p> <p><pre><code>i_c_object_car,i_o_gray\n</code></pre> </p> <p>You can use variety of selection methods including face selectors to grayscale faces as well.</p> <p>Using Inteliver command chain you can apply effects multiple times using <code>/</code> separator. With the help of this feature you can grayscale multiple regions.</p>"},{"location":"examples/object-detection/","title":"Object Detection","text":"<p>Object detection is one of the A.I. features of Inteliver. Using this feature you can detect the objects presents in your image on-the-fly. </p> <p>Another usefull ability is to apply image processing operation on an object instead of the whole image.</p>"},{"location":"examples/object-detection/#example-01","title":"Example 01","text":"Original ImageObject Detection <pre><code>Original Image\n</code></pre> <pre><code>i_o_detect\n</code></pre>"},{"location":"examples/object-detection/#example-02","title":"Example 02","text":"Original ImageObject Detection <pre><code>Original Image\n</code></pre> <pre><code>i_o_detect\n</code></pre>"},{"location":"examples/object-detection/#example-03","title":"Example 03","text":"Original ImageObject Detection <pre><code>Original Image\n</code></pre> <pre><code>i_o_detect\n</code></pre>"},{"location":"examples/operation/","title":"Operation","text":""},{"location":"examples/operation/#image-processing-operations","title":"Image Processing Operations","text":"<p>Modify your image data using a variety of image processing functions. These functionality includes the following.</p> <ul> <li>Resize</li> <li>Crop</li> <li>Rotate</li> <li>Flip</li> <li>Blur</li> <li>Pixelate</li> <li>Sharpen</li> <li>Gray Scale</li> <li>Text Overlay</li> </ul> <p>Each operation has examples and you can also refer to API reference section for complete list of args.</p> <p>The examples uses inteliver intuitive URL query commands. Please refer to intuitive query commands for more information on our URL query commands. </p> <p>Success</p> <p>For more information on how to apply these functionalities using our SDKs please refer to libraries.</p>"},{"location":"examples/pixelate/","title":"Pixelate","text":"<p>Here are some examples for pixelate operation on-the-fly.</p>"},{"location":"examples/pixelate/#original-image","title":"Original Image","text":""},{"location":"examples/pixelate/#default-pixelate","title":"Default Pixelate","text":"<p>Using the <code>i_o_pixelate</code> url command modifier you can pixelate your images on-the-fly. The args value to this modifier will specify the intensiveness of the pixelate operation.</p> <p>Here are the original image with pixelate modification with 5 and 20 as intensiveness values.</p> <p><pre><code>i_o_pixelate_5\n</code></pre> </p> <p><pre><code>i_o_pixelate_20\n</code></pre> </p>"},{"location":"examples/pixelate/#manual-selection-pixelate","title":"Manual Selection Pixelate","text":"<p>The default behaviour of the pixelate image effect is to apply the pixelate function on the whole image. However you can select specific region to apply pixelate effect.</p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of the rectangle and using <code>i_h</code> and <code>i_w</code> you can specify the height and width of the region you want to apply pixelate effect. In this example we set the center of pixelate effect to (150, 100) and the rectangle dimension is (200, 200).</p> <p><pre><code>i_c_x_150,i_c_y_100,i_h_200,i_w_200,i_o_pixelate_10\n</code></pre> </p>"},{"location":"examples/pixelate/#multi-selection-pixelate","title":"Multi-Selection Pixelate","text":"<p>Using Inteliver command chain you can apply effects multiple times using <code>/</code> separator. With the help of this feature you can pixelate multiple regions.</p> <p>Here, in the first part of the command chain we will pixelate a rectangle and in the second part we blur the face.</p> <pre><code>i_c_x_150,i_c_y_100,i_h_200,i_w_200,i_o_pixelate_10/i_c_face,i_o_pixelate_10\n</code></pre> <p></p>"},{"location":"examples/pixelate/#face-pixelate","title":"Face Pixelate","text":"<p>You can pixelate faces in your images using face selector and pixelate operation command.</p> <pre><code>i_c_face,i_o_pixelate_10\n</code></pre> <p></p>"},{"location":"examples/pixelate/#objects-pixelate","title":"Objects Pixelate","text":"<p>Using Inteliver A.I. object detection feature you can select different objects in your images and then pixelate them.</p> <p>In this example, by using object selector <code>i_c_object_person</code> we will pixelate the person in the image.</p> <pre><code>i_c_object_person,i_o_pixelate_10\n</code></pre> <p></p> <p>And we can also pixelate the dog in the image.</p> <pre><code>i_c_object_dog,i_o_pixelate_10\n</code></pre> <p></p> <p>Note</p> <p>You can lookup the object detection API reference to see all the objects we detect in images.</p>"},{"location":"examples/resize/","title":"Resize","text":"<p>Here are some examples for resize operation on-the-fly.</p>"},{"location":"examples/resize/#original-image","title":"Original Image","text":""},{"location":"examples/resize/#simple-resize","title":"Simple Resize","text":"<p>Let's say we want to resize the image to 200 pixels by 200 pixels. Here is the url command to do that.</p> <pre><code>i_h_200,i_w_200,i_o_resize\n</code></pre> <p><code>i_h_200</code> will set height to 200 and <code>i_w_200</code> also set the width to 200. <code>i_o_resize</code> is the operation command.</p> <p></p>"},{"location":"examples/resize/#keep-ratio","title":"Keep Ratio","text":"<p>As obvious in the modified image, ratio is not preserved. If you would like to keep the original image ratio when resizing you can use <code>i_o_resize_keep</code> instead.</p> <pre><code>i_h_200,i_w_200,i_o_resize_keep\n</code></pre> <p></p>"},{"location":"examples/resize/#face-center","title":"Face Center","text":"<p>You can use face selector <code>i_c_face</code> to resize the image centered on the face. </p> <pre><code>i_c_face,i_h_200,i_w_200,i_o_resize_keep\n</code></pre> <p></p>"},{"location":"examples/resize/#combining-operations","title":"Combining Operations","text":"<p>Using face selector plus a round crop <code>i_o_rcrop</code> you can create an automatic round profile picture. Using <code>i_o_format_png</code> will change the image format to PNG to be transparent in the corners.</p> <p><pre><code>i_c_face,i_h_200,i_w_200,i_o_resize_keep,i_o_rcrop,i_o_format_png\n</code></pre> </p>"},{"location":"examples/resize/#one-dimension-resize","title":"One Dimension Resize","text":"<p>You can resize an image by specifying only height or width. The other dimension will be calculated according to the original image ratio.</p> <p>The following image is resized to have a height of 200 pixels.</p> <p><pre><code>i_h_200,i_o_resize\n</code></pre> </p> <p>The following image is resized to have a width of 200 pixels.</p> <p><pre><code>i_w_200,i_o_resize\n</code></pre> </p>"},{"location":"examples/rotate/","title":"Rotate","text":"<p>Here are some examples for rotate operation on-the-fly.</p>"},{"location":"examples/rotate/#original-image","title":"Original Image","text":""},{"location":"examples/rotate/#simple-rotate","title":"Simple Rotate","text":"<p>Using <code>i_o_rotate</code> url command modifier you can rotate the image on-the-fly. The integer after the <code>i_o_rotate</code> specify the rotate degree. Here we are rotating our original image by 90 degree and 180 degree.</p> <p><pre><code>i_o_rotate_90\n</code></pre> </p> <p><pre><code>i_o_rotate_180\n</code></pre> </p>"},{"location":"examples/rotate/#scale-rotate","title":"Scale Rotate","text":"<p>After the rotation degree you can specify a scale. This float value will determine the scale of the image after the rotation.   </p> <p><pre><code>i_o_rotate_60_1.8\n</code></pre> </p>"},{"location":"examples/rotate/#rotate-pivot","title":"Rotate Pivot","text":"<p>By default the rotation operation set the pivot of rotation to the center of the image. </p> <p>However you can set the rotation pivot either by explicitly using <code>i_c_x</code> and <code>i_c_y</code> commands or other selecting commands such as <code>i_c_face</code> to set the rotation pivot on face.</p> <p><pre><code>i_c_x_250,i_c_y_250,i_o_rotate_60_2\n</code></pre> </p>"},{"location":"examples/selection/","title":"Selection","text":""},{"location":"examples/selection/#image-selection","title":"Image Selection","text":"<p>You can apply Inteliver operations on different part of image. For selecting the part of image you want to apply an operation you can use the following different selections.</p> <ul> <li>Window Selection</li> <li>Face Selection</li> <li>Objects Selection</li> </ul>"},{"location":"examples/selection/#window-selection","title":"Window Selection","text":"<p>By default the image processing operations are applied to the whole image. However you can manually select a window and then apply the operation. </p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of your window and using <code>i_h</code> and <code>i_w</code> you can set the width and height of the window respectively.</p>"},{"location":"examples/selection/#face-selection","title":"Face Selection","text":"<p>Using Inteliver A.I. face detection you can choose to apply an operation on only faces. For example you can crop the image based on the faces or blur or pixelate a face to provide privacy. </p> <p>Using <code>i_c_face</code> you can select to apply the operation on the faces present in your images.</p>"},{"location":"examples/selection/#objects-selection","title":"Objects Selection","text":"<p>Using Inteliver A.I. object detection you can apply different operations on images. For example you can crop the objects in the image or sharpen a specific object.</p> <p>We detect many object in the images. Using <code>i_c_object</code> and the desired object as arg to this command you can automatically apply the operations on the specific objects.</p> <p>Using A.I. features possibilities are simply endless.</p>"},{"location":"examples/selection/#text-selection","title":"Text Selection","text":"<p>Info</p> <p>This feature will be released soon.</p> <p>Using Inteliver A.I. text detection you can apply image processing functions only on texts. For example pixelating a car plate or applying faster OCR on texts in an image.</p> <p>Info</p> <p>In the following examples for each operation we show you how to exploit the full potential of these selection methods.</p>"},{"location":"examples/sharpen/","title":"Sharpen","text":"<p>Here are some examples for sharpening operation on-the-fly.</p>"},{"location":"examples/sharpen/#original-image","title":"Original Image","text":""},{"location":"examples/sharpen/#default-sharpen","title":"Default Sharpen","text":"<p>Using the <code>i_o_sharpen</code> url command modifier you can sharpen your images on-the-fly.</p> <p><pre><code>i_o_sharpen\n</code></pre> </p>"},{"location":"examples/sharpen/#manual-selection-sharpen","title":"Manual Selection Sharpen","text":"<p>The default behaviour of the sharpening image effect is to apply the sharpen function on the whole image. However you can select specific region to apply sharpen effect.</p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of the rectangle and using <code>i_h</code> and <code>i_w</code> you can specify the height and width of the region you want to apply sharpen effect. In this example we set the center of sharpen effect to (275, 300) and the rectangle dimension is (100, 100).</p> <p>Using sharpen effect we made the car plate in this example much more clearer. Compare the car plate in this image with the original image.</p> <p><pre><code>i_c_x_275,i_c_y_300,i_h_100,i_w_100,i_o_sharpen\n</code></pre> </p>"},{"location":"examples/sharpen/#objects-sharpen","title":"Objects Sharpen","text":"<p>Using Inteliver A.I. object detection feature you can select different objects in your images and then sharpen them.</p> <p>In this example, by using object selector <code>i_c_object_car</code> we will only sharpen the car in the image.</p> <p><pre><code>i_c_object_car,i_o_sharpen\n</code></pre> </p> <p>Note</p> <p>You can lookup the object detection API reference to see all the objects we detect in images.</p>"},{"location":"examples/sharpen/#face-sharpen","title":"Face Sharpen","text":"<p>You can sharpen faces in your images using face selector and sharpen operation command. This will both make blured faces in your image more clearer and also can be used for better face recognition.</p>"},{"location":"examples/sharpen/#original-image_1","title":"Original Image","text":""},{"location":"examples/sharpen/#face-sharpen_1","title":"Face Sharpen","text":"<pre><code>i_c_face,i_o_sharpen\n</code></pre> <p>Using Inteliver command chain you can apply effects multiple times using <code>/</code> separator. With the help of this feature you can sharpen multiple regions.</p>"},{"location":"examples/text-overlay/","title":"Textoverlay","text":"<p>Here are some examples to put text overlays on your images on-the-fly.</p> <p>Using <code>i_o_text</code> you can specify the text, scale, font and color of the text you would like to put on the image.</p> <p>Using <code>i_c_x</code> and <code>i_c_y</code> you can set the center of the text.</p> <p>The args are separated using <code>_</code> and here is the list of args you can use.</p> <ul> <li>text: args[0]</li> <li>scale: args[1]</li> <li>font: args[2]</li> <li>red: args[3]</li> <li>green: args[4]</li> <li>blue: args[5]</li> </ul> <p>Warning</p> <p>Textoverlay is a new and experimental feature.</p> <p><pre><code>i_c_y_100,i_c_x_-180,i_o_text_Your-Brand_1.5_4_14_70_160\n</code></pre> </p> <p><pre><code>i_c_y_100,i_c_x_-140,i_o_text_inteliver_2.5_1_14_70_160\n</code></pre> </p> <p>Note</p> <p>You can refer to the text overlay API reference to see all the possible values for arguments.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to Inteliver, an open-source image management framework designed to store, modify on-the-fly, and deliver optimized images. </p> <p>This guide will help you get up and running with Inteliver, covering the essential concepts and features.</p>"},{"location":"getting-started/#what-well-cover","title":"What We'll Cover","text":"<ul> <li> Installation and Quick Start: How to install Inteliver and get started.</li> <li> How Inteliver Works: Understanding query commands and the core functionality.</li> <li> Easy Integration: Leveraging intuitive URLs, SDK integration, and DNS integration.</li> <li> Image Modifications Features: Exploring the various image modification options.</li> <li> Real-Time Image Compression: Understanding the image compression capabilities.</li> <li> A.I. and Image Information: Identify objects, Remove background, Detect faces and more.</li> <li> Inteliver Dashboard: Navigating and utilizing the Inteliver dashboard.</li> <li> Use Cases: Real-world applications and scenarios for Inteliver.</li> </ul> <ul> <li> <p> Installation and Quick Start</p> <p>Install and self-host inteliver or use our Cloud version</p> <p> Installation</p> </li> <li> <p> How inteliver Works</p> <p>Explore inteliver's magic. Understand query commands and sky's the limit</p> <p> Query Commands</p> </li> <li> <p> Easy Integration</p> <p>Integrate using simple intuitive URLs, SDK integration, or DNS integration</p> <p> Integration</p> </li> <li> <p> Image Modifications</p> <p>Exploring the various image modification options.</p> <p> Image Modifications</p> </li> <li> <p> Real-Time Image Compression</p> <p>Deliver the best quality and size automatically</p> <p> Image Compression</p> </li> <li> <p> A.I. and Image Information</p> <p>Identify and tag objects, Remove background, Detect faces and more</p> <p> A.I. Algorithms</p> </li> <li> <p> Inteliver Dashboard</p> <p>Using inteliver dashboard you can monitor and analyze all of the platform activity</p> <p> Dashboard</p> </li> <li> <p> Use Cases</p> <p>Inteliver is versatile and can be applied in various scenarios</p> <p> Use Cases</p> </li> </ul> <p>We hope this guide helps you get started with Inteliver. For detailed instructions and examples, please refer to the respective sections in the documentation. Happy coding!</p>"},{"location":"getting-started/how-inteliver-works/","title":"How inteliver Works?","text":"<p>Inteliver uses intuitive url query commands to apply specefic operations on each image.</p> <p>Using these query commands you can specify what changes you need to apply to your data or which operations should be applied on your data.</p> <p>Inteliver delivers the data after processing the query commands and applying the algorithms.</p> <p>For example for changing the width of the image to <code>200</code> pixels you add this command to the image URL:</p> <pre><code>i_w_300,i_o_resize_keep\n</code></pre> <ul> <li><code>i_w_300</code>: Sets the image width to 200px</li> <li><code>i_o_resize_keep</code>: Resize the image while keeping it's ratio</li> </ul> Original ImageModified Image <p></p> <p><code>http://res.inteliver.local/media/v1/inteliver/000923288308380000000000000000000815.jpeg</code></p> <p></p> <p><code>http://res.inteliver.local/media/v1/inteliver/i_w_300,i_o_resize_keep/000923288308380000000000000000000815.jpeg</code></p>"},{"location":"getting-started/how-inteliver-works/#data-resource-url","title":"Data Resource URL","text":"<p>Lets consider the following image URL.</p> An image URL on your servers<pre><code>\"http://your-website/your-storage/image-id.jpg\"\n</code></pre> An image URL on inteliver storage<pre><code>\"http://res.inteliver.local/media/v1/inteliver/000923288308380000000000000000000815.jpeg\"\n</code></pre> <p>The image can be stored using your own internal storage or inteliver storage. </p> <p>The <code>cloudname</code> in the above mentioned URL is the cloudname that you use, here it is <code>inteliver</code>. </p> <p>After setting up inteliver self-host or inteliver cloud you will have a cloudname. You can use this cloudname to access your resources.</p> <p>You can also use your own data storage after enabling your endpoint in inteliver panel.</p> <pre><code>http://res.inteliver.local/media/v1/url/your-path-to-your-data\n</code></pre>"},{"location":"getting-started/how-inteliver-works/#url-query-commands","title":"URL Query Commands","text":"<p>Inteliver query commands are written between the <code>cloudname</code> and the <code>resource pathname</code>.</p> <p>The mentioned data resource is the following picture.</p> <p></p> <p>Lets say we want to set the focus on these sets of images to face <code>i_c_face</code>, and change the size of the image to a <code>200</code> by <code>200</code> pixels <code>i_w_200,i_h_200</code> and crop it <code>i_o_crop</code> rounded <code>i_o_rcrop</code> and change the image format to png <code>i_o_format_png</code>.</p> <p>The above creates a face focused profile picture.</p> <p>The final URL with the above mentioned changes will be: </p> Profile Picture Commands<pre><code>\"http://res.inteliver.local/media/v1/inteliver/i_c_face,i_w_200,i_h_200,i_o_crop,i_o_rcrop,i_o_format_png/000923288308380000000000000000000815.jpeg\"\n</code></pre> Query Commands<pre><code>\"/i_c_face,i_w_200,i_h_200,i_o_crop,i_o_rcrop,i_o_format_png/\"\n</code></pre> <ul> <li><code>i_c_face</code>: Change the center of modification to detected face</li> <li><code>i_w_200</code>, <code>i_h_200</code>: Sets the image width to 200 and the image height to 200 pixels</li> <li><code>i_o_rcrop</code>: To round crop the image</li> <li><code>i_o_format_png</code>: Change the image format to PNG for background transparecy</li> </ul> <p>The result will be a rounded profile picture of the image with focus on face. All done with a minor url query commands change.</p> <p></p> <p>Success</p> <p>Feel free to change and exprience this url commands system in our playground.</p>"},{"location":"getting-started/image-ai/","title":"Image A.I. Algorithms","text":"<p>Inteliver currently supports out-of-the-box <code>Object Detection</code> and <code>Face Detection</code>. </p> <p>Info</p> <p>Background Removal is our next feature in A.I. algorithms.</p>"},{"location":"getting-started/image-ai/#object-detection","title":"Object Detection","text":"<p>Using Inteliver you can detect the objects in each image. You can either use this metadata or you can select based on each object and apply the desired operation.</p> <p>Here is the returend result after using object detection command.</p> <p>Tip</p> <p>Object detection can be used to automatically fill image tags or search images semantically in a large dataset of images.</p> Original ImageObject Detection <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpeg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_o_detect/resource.jpeg\n</code></pre> <p></p>"},{"location":"getting-started/image-ai/#operation-on-objects","title":"Operation on Objects","text":"<p>Using object detection feature of inteliver you can modify images semantically.</p> <p>Lets say we want to crop the cars in a set of images:</p> Original ImageObject Operation <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpeg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_object_truck,i_o_crop/resource.jpeg\n</code></pre> <p></p> <p>Note</p> <p>Here we first select car's object by <code>i_c_object_truck</code> and then crop it using <code>i_o_crop</code> operation.</p> <p>There are also more examples in object detection examples.</p> <p>Info</p> <p>you can also refer to API reference section for complete list of args.</p>"},{"location":"getting-started/image-ai/#face-detection","title":"Face Detection","text":"<p>Using A.I. algorithms and deep learning face detection neural networks, Inteliver enables you to detect all the faces present in your image data.</p> <p>Using Inteliver you can detect the faces in each image. You can either use this metadata or you can select based on each face and apply the desired operation.</p>"},{"location":"getting-started/image-ai/#profile-picture","title":"Profile Picture","text":"<p>Here is an example to extract a profile picture out of the user image.</p> Original ImageProfile Picture <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_face,i_h_200,i_w_200,i_o_crop,i_o_rcrop,i_o_format_png/resource.jpg\n</code></pre> <p></p> <p>Tip</p> <p>If the image containes more than one face, the faces will be numbered and accessible through each face numbers. The face number automatically asigned according to the focusness of that specefic face.</p>"},{"location":"getting-started/image-ai/#multiple-faces","title":"Multiple Faces","text":"<p>Here is an image with a two faces.</p> Original ImageChoose First FaceChoose Second Face <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_face_0,i_h_250,i_w_250,i_o_crop,i_o_rcrop,i_o_format_png/resource.jpeg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_face_2,i_h_250,i_w_250,i_o_crop,i_o_rcrop,i_o_format_png/resource.jpg\n</code></pre> <p></p>"},{"location":"getting-started/image-ai/#background-removal","title":"Background Removal","text":"<p>Using background removal A.I. feature you can remove the background of your images.</p> <p>Info</p> <p>This feature is under development and upon release the docs will get completed.</p>"},{"location":"getting-started/image-compression/","title":"Image Compression","text":"<p>Using different inteliver real-time compressions you can deliver the best quality with lowest size considering the client's bandwidth.</p>"},{"location":"getting-started/image-compression/#image-formats","title":"Image Formats","text":"<p>Currently we supports <code>WEBP</code>, <code>JPEG</code> and <code>PNG</code> compression formats. </p> <p>You can specify the format and the compression level. </p> <p>Here is an image with Real-Time WEBP compression levels of 80, 50 and 20.</p> <p>Tip</p> <p>The compression level is between <code>0 and 100</code>. 100 is the best quality and the lower it is it will reduce the size. A level of <code>70 to 85</code> is usually the best trade off between quality and size.</p> Original ImageWEBP Quality Level: 80WEBP Quality Level: 50WEBP Quality Level: 20 <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpeg\n</code></pre> <p></p> <p>Original Image Size: 248 KB</p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_o_format_webp_80/resource.jpeg\n</code></pre> <p></p> <p>Compressed Image Size: 20.2 KB Compression Ratio: ~12</p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_o_format_webp_50/resource.jpeg\n</code></pre> <p></p> <p>Compressed Image Size: 12.2 KB Compression Ratio: ~20</p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_o_format_webp_20/resource.jpeg\n</code></pre> <p></p> <p>Compressed Image Size: 7.1 KB Compression Ratio: ~37</p> <p>you can also refer to API reference section for complete list of args.</p>"},{"location":"getting-started/image-modification/","title":"Image Modifications","text":"<p>Modify your image data using a variety of image processing functions. These functionality includes the following.</p> <ul> <li> Resize</li> <li> Crop</li> <li> Rotate</li> <li> Flip</li> <li> Blur</li> <li> Pixelate</li> <li> Sharpen</li> <li> Gray Scale</li> <li> Text Overlay</li> </ul>"},{"location":"getting-started/image-modification/#here-are-simple-examples","title":"Here are simple examples:","text":""},{"location":"getting-started/image-modification/#resize","title":"Resize","text":"Original ImageModified Image <p>Original Image </p> <p></p> <p>Real-Time Resize to <code>250x250px</code></p>"},{"location":"getting-started/image-modification/#crop","title":"Crop","text":"Original ImageModified Image <p>Original Image </p> <p></p> <p>Real-Time Crop to <code>300x300px</code></p>"},{"location":"getting-started/image-modification/#rotate","title":"Rotate","text":"Original ImageModified Image <p>Original Image </p> <p></p> <p>90degree Rotate</p>"},{"location":"getting-started/image-modification/#pixelate","title":"Pixelate","text":"Original ImageModified Image <p>Original Image </p> <p></p> <p>Real-Time Pixelate</p>"},{"location":"getting-started/image-modification/#gray-scale","title":"Gray Scale","text":"Original ImageModified Image <p>Original Image </p> <p></p> <p>Real-Time Gray Scale</p> <p>Each operation has examples and you can also refer to API reference section for complete list of args.</p> <p>The examples uses inteliver intuitive URL query commands. Please refer to intuitive query commands for more information on our URL query commands. </p> <p>Note</p> <p>For more information on how to apply these functionalities using our SDKs please refer to libraries.</p>"},{"location":"getting-started/image-modification/#image-selection","title":"Image Selection","text":"<p>You can apply the operation on different part of image. For selecting the part of image you want to apply an operation you can use the following different selections.</p> <p>There are examples of each one in selection section in examples.</p> <ul> <li>Window Selection</li> <li>Face Selection</li> <li>Objects Selection</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Note</p> <p>How to self host inteliver</p>"},{"location":"getting-started/integration/","title":"Integration","text":""},{"location":"getting-started/integration/#intuitive-urls","title":"Intuitive URLs","text":"<p>Without any change in your codes, you can modify your image resources using our intuitive url modifiers.</p> <p>Inteliver delivers the data after processing the query commands and applying the algorithms.</p> <p>For example for changing the width of the image to <code>200</code> pixels you add this command to the image URL:</p> <pre><code>i_w_300,i_o_resize_keep\n</code></pre> <ul> <li><code>i_w_300</code>: Sets the image width to 200px</li> <li><code>i_o_resize_keep</code>: Resize the image while keeping it's ratio</li> </ul> Original ImageModified Image <p></p> <p><code>http://res.inteliver.local/media/v1/inteliver/000923288308380000000000000000000815.jpeg</code></p> <p></p> <p><code>http://res.inteliver.local/media/v1/inteliver/i_w_300,i_o_resize_keep/000923288308380000000000000000000815.jpeg</code></p>"},{"location":"getting-started/integration/#sdk-integration","title":"SDK Integration","text":"<p>Inteliver tries to minimize the integration process by providing SDKs in different programming languages. Please visit our libraries section for integrating using an SDK.</p> <p>Inteliver currently provides Python, Javascript, and React SDKs.</p> <p>Note</p> <p>We are updating SDKs to be compatibale with our latest changes. Meanwhile we are more focused on Intuitive URL integration mode.</p>"},{"location":"getting-started/integration/#dns-integration","title":"DNS Integration","text":"<p>Note</p> <p>This feature will be available soon.</p> <p>You can integrate with inteliver by only changing your DNS nameservers to ours and use our intuitive  URL commands query system.</p>"},{"location":"getting-started/inteliver-dashboard/","title":"Inteliver Dashboard","text":""},{"location":"getting-started/inteliver-dashboard/#panel-overview","title":"Panel Overview","text":"<p>Using our management dashboard you can keep track of your requests and sotrage.</p> <p>You can see the library of your images along with analytics and user management.</p> <p></p>"},{"location":"getting-started/inteliver-dashboard/#analytics","title":"Analytics","text":"<p>Using our analytics section you can keep track of the following monthly and daily.</p> <ul> <li> Transformations Requests</li> <li> Storage Usage</li> <li> Browser Information</li> <li> Operating System Information</li> <li> Device Information</li> <li> Referer Information</li> <li> Geolocation Information</li> <li> Media Fromat Information</li> </ul> <p></p> <p></p>"},{"location":"getting-started/inteliver-dashboard/#storage","title":"Storage","text":"<p>Using storage section in panel you can upload your image resources and modify images using inteliver intuitive urls modifiers.</p> <p></p>"},{"location":"getting-started/inteliver-dashboard/#library","title":"Library","text":"<p>Using library section you can view the latest resources added to storage.</p> <p></p>"},{"location":"getting-started/usecases/","title":"Usecases","text":""},{"location":"getting-started/usecases/#end-to-end-image-assets-management","title":"End-To-End Image Assets Management","text":"<p>Inteliver offers a comprehensive solution for managing your organization's digital assets:</p>"},{"location":"getting-started/usecases/#upload-and-store","title":"Upload and Store","text":"<ul> <li> Easily upload images with intuitive APIs or user-friendly interfaces.</li> <li> Store images in various formats (JPG, PNG, WEBP) and resolutions, organized for easy access.</li> </ul>"},{"location":"getting-started/usecases/#transform-and-customize","title":"Transform and Customize","text":"<ul> <li> Use real-time programmable media to resize, crop, rotate, and apply filters to images.</li> <li> Perform bulk transformations for consistency across large image sets.</li> </ul>"},{"location":"getting-started/usecases/#monitor-and-analyze","title":"Monitor and Analyze","text":"<ul> <li> Track usage patterns and performance metrics.</li> <li> Manage different versions of images for change tracking and reversion.</li> </ul>"},{"location":"getting-started/usecases/#optimize-and-deliver","title":"Optimize and Deliver","text":"<ul> <li> Use Inteliver\u2019s CDN integration to cache images closer to users, reducing latency.</li> <li> Convert images to mobile-friendly formats and dynamically adjust compression for faster load times.</li> <li> Implement lazy loading to defer image loading until needed, improving initial page load times.</li> </ul> <p>Inteliver\u2019s end-to-end image asset management ensures your digital assets are organized, optimized, and securely managed, enhancing productivity and collaboration within your organization.</p>"},{"location":"getting-started/usecases/#e-commerce-optimization","title":"E-commerce Optimization","text":"<p>E-commerce platforms need to balance image quality with page speed. Inteliver allows you to:</p> <ul> <li> Dynamically resize and crop product images.</li> <li> Apply compression to reduce file sizes without sacrificing quality.</li> <li> Use lazy loading to defer offscreen images, enhancing page performance.</li> </ul>"},{"location":"getting-started/usecases/#mobile-delivery-optimization","title":"Mobile Delivery Optimization","text":"<p>Delivering high-quality images to mobile devices efficiently is crucial for providing a seamless user experience. </p> <p>Inteliver's mobile delivery optimization ensures that images are resized and compressed to enhance loading times, offering up to a 20x speed improvement. Here\u2019s how you can achieve this:</p>"},{"location":"getting-started/usecases/#resizing-for-mobile-screens","title":"Resizing for Mobile Screens","text":"<ul> <li> Dynamic Resizing: Automatically resize images to fit various mobile screen sizes, ensuring optimal display without compromising quality.</li> <li> Adaptive Delivery: Use responsive design principles to deliver appropriately sized images based on the device type and resolution.</li> </ul>"},{"location":"getting-started/usecases/#compression-techniques","title":"Compression Techniques","text":"<ul> <li> Format Conversion: Convert images to mobile-friendly formats like WEBP, which provide better compression and faster load times compared to traditional formats like JPG and PNG.</li> <li> Quality Adjustment: Adjust the compression quality dynamically to balance image clarity and file size, ensuring quick delivery without noticeable degradation.</li> </ul>"},{"location":"getting-started/usecases/#cdn-integration","title":"CDN Integration:","text":"<ul> <li> Edge Caching: Leverage Content Delivery Networks (CDN) to cache images closer to mobile users, reducing latency and speeding up delivery times.</li> <li> Global Distribution: Distribute images across multiple CDN nodes worldwide, ensuring fast access regardless of the user\u2019s location.</li> </ul> <p>Using Inteliver\u2019s mobile delivery optimization improves the speed and performance of mobile services, enhancing user satisfaction and boosting engagement and conversion rates.</p>"},{"location":"getting-started/usecases/#user-generated-content","title":"User-Generated Content","text":"<p>Managing user-uploaded images can be challenging. Inteliver helps by:</p> <ul> <li> Automatically applying transformations to uploaded images.</li> <li> Ensuring consistent quality and appearance.</li> <li> Reducing the need for manual intervention and processing.</li> </ul>"},{"location":"getting-started/usecases/#profile-picture","title":"Profile Picture","text":"<p>A usefull usecase is to extract profile picture automatically from user picture.</p> Original ImageProfile Picture on-the-fly <pre><code>http://res.inteliver.local/media/v1/cloudname/resource.jpg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_face,i_h_200,i_w_200,i_o_crop,i_o_rcrop,i_o_format_png/resource.jpg\n</code></pre> <p></p>"},{"location":"getting-started/usecases/#face-blur","title":"Face Blur","text":"<p>Another usecase is to blur faces in image to protect the privacy of public shared image data.</p> Original ImageFace Blur on-the-fly <pre><code>http://res.inteliver.local/media/v1/cloudname/resouce.jpg\n</code></pre> <p></p> <pre><code>http://res.inteliver.local/media/v1/cloudname/i_c_face,i_o_blur_30/resource.jpg\n</code></pre> <p></p> <p>Note</p> <p>Please visit our playground for more predefined usecases.</p>"},{"location":"introduction/architecture/","title":"Architecture","text":"<p>This page provides a detailed explanation of the overall architecture of inteliver, using a sequence diagram to illustrate the flow of data and operations within the system.</p> inteliver Architecture Birdview"},{"location":"introduction/architecture/#inteliver-data-flow-diagram","title":"inteliver Data Flow Diagram","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant inteliver\n    participant YourServers\n    Client-&gt;&gt;inteliver: Request for data\n    loop inteliver caching\n        inteliver-&gt;inteliver: Respond from cached data if available\n    end\n    inteliver--&gt;&gt;Client: Cached data\n    inteliver-&gt;&gt;YourServers: Forward Request\n    YourServers--&gt;&gt;inteliver: Requested data\n    loop inteliver A.I.\n        inteliver-&gt;inteliver: Apply A.I. algorithms on data as requested\n    end\n    inteliver--&gt;&gt;Client: Tailored data</code></pre>"},{"location":"introduction/architecture/#diagram-explanation","title":"Diagram Explanation","text":"<p>The sequence diagram above illustrates the interactions between the Client, inteliver, and YourServers. Here is a step-by-step explanation of the processes depicted in the diagram:</p>"},{"location":"introduction/architecture/#1-client-requests-data","title":"1. Client Requests Data","text":"<p>The process begins with the Client sending a request for data to the inteliver platform.</p>"},{"location":"introduction/architecture/#2-inteliver-caching","title":"2. inteliver Caching","text":"<p>Upon receiving the request, inteliver first checks its cache to see if the requested data is already available. This is depicted by the inteliver-&gt;inteliver loop labeled \"Respond from cached data if available\". If the data is found in the cache, inteliver sends the cached data back to the Client immediately.</p>"},{"location":"introduction/architecture/#3-forwarding-request-to-yourservers","title":"3. Forwarding Request to YourServers","text":"<p>If the data is not available in the cache, inteliver forwards the request to YourServers. This is shown by the inteliver-&gt;&gt;YourServers arrow. YourServers process the request and send the requested data back to inteliver.</p>"},{"location":"introduction/architecture/#4-applying-ai-algorithms","title":"4. Applying A.I. Algorithms","text":"<p>Once inteliver receives the data from YourServers, it enters another loop where it applies the necessary A.I. algorithms to modify and tailor the data as per the request. This is represented by the inteliver-&gt;inteliver loop labeled \"Apply A.I. algorithms on data as requested\".</p>"},{"location":"introduction/architecture/#5-sending-tailored-data-to-client","title":"5. Sending Tailored Data to Client","text":"<p>After processing the data with the required A.I. algorithms, inteliver sends the tailored data back to the Client, completing the request cycle.</p>"},{"location":"introduction/features/","title":"Features","text":""},{"location":"introduction/features/#image-modification","title":"\ud83d\ude80 Image Modification","text":""},{"location":"introduction/features/#resize-crop-sharpen-blur-pixelate-and-more","title":"Resize, Crop, Sharpen, Blur, Pixelate, and more","text":"<p>Modify your image data using a variety of image processing functions.</p> inteliver Image Modifications All inteliver modifications <p>inteliver currently has the following image modifications.</p> <ul> <li> Resize</li> <li> Crop</li> <li> Rotate</li> <li> Flip</li> <li> Blur</li> <li> Pixelate</li> <li> Sharpen</li> <li> Gray Scale</li> <li> Watermark</li> </ul>"},{"location":"introduction/features/#image-information","title":"\ud83d\udd0d Image Information","text":""},{"location":"introduction/features/#object-detection-semantic-manipulation","title":"Object Detection, Semantic Manipulation","text":"<p>Detect objects in your images and modify them semantically.</p> inteliver Image Information"},{"location":"introduction/features/#image-compression","title":"\ud83d\udcc9 Image Compression","text":""},{"location":"introduction/features/#jpg-webp-png","title":"JPG, WEBP, PNG","text":"<p>Reformat your images in different formats and compress them efficiently.</p> inteliver Smart Compression"},{"location":"introduction/features/#all-protocols","title":"\ud83d\ude03 All Protocols","text":""},{"location":"introduction/features/#https-s3-sftp","title":"HTTPS, S3, SFTP","text":"<p>Whether your data sources uses HTTP, S3 or SFTP protocols, you can integrate inteliver in your pipeline.</p>"},{"location":"introduction/features/#cdn-aware","title":"\ud83c\udf10 CDN Aware","text":""},{"location":"introduction/features/#deliver-as-fast-as-possible","title":"Deliver as fast as possible","text":"<p>Inteliver is developed with a CDN-based design. Use your CDN backbone or Inteliver CDN to cache processed data.</p>"},{"location":"introduction/features/#easy-integration","title":"\ud83d\udd17 Easy Integration","text":"<p>API Integration, DNS Integration</p> <p>You can do it all on the fly with minimal backend changes.</p>"},{"location":"libraries/","title":"Introduction to inteliver Libraries","text":"<p>Inteliver is dedicated to simplifying the integration process for developers by offering SDKs for the most widely-used programming languages and frameworks. </p> <p>Our goal is to ensure that integrating Inteliver into your projects is seamless and developer-friendly.</p> <p>Question</p> <p>If your preferred programming language is not yet supported, we welcome contributions from the community to help expand our library offerings.</p> <p>Inteliver minimizes the integration process through Intuitive URL Modifier commands and by providing SDKs in different programming languages. This approach allows developers to efficiently utilize Inteliver's image management capabilities in their projects.</p> <p>Here are the list of our SDKs:</p> <ul> <li> Python</li> <li> NodeJS</li> <li> React</li> <li> Golang</li> </ul> <p>We are continuously working to expand our SDK offerings, ensuring that more languages and frameworks are supported. We encourage you to contribute if you don't see your preferred language or framework listed.</p>"},{"location":"libraries/golang/","title":"Golang","text":"<p>Info</p> <p>Will be released soon. You can follow our releases in our  Github page</p>"},{"location":"libraries/javascript/","title":"Javascript","text":""},{"location":"libraries/javascript/#inteliver-nodejs-sdk","title":"Inteliver Node.js SDK","text":"<p>Warning</p> <p>We are updating SDKs to be compatibale with our latest changes.</p> <p>Note</p> <p>Please visit our Github page for more information.</p>"},{"location":"libraries/javascript/#nodeinteliver","title":"NodeInteliver","text":"<p>Using our Node.js sdk you can upload, set configs and retrieve your data.</p>"},{"location":"libraries/javascript/#installation","title":"Installation","text":"<p>This python package is available at node package manager npm.</p> <p>simply run the following command to be able to use our nodejs API.</p> <pre><code>    npm install nodeinteliver\n</code></pre> <p>You can also pull our repository and use the API without any requirements to install. </p> <pre><code>    git pull https://github.com/inteliver/nodeinteliver.git\n</code></pre>"},{"location":"libraries/javascript/#inteliver-configs","title":"Inteliver Configs","text":"<p>After registering in Inteliver you will have a cloud-name and token. </p> <p>This pair will be used to authenticate you for uploading data or using intelligent service.  To set this in your code simply:</p> Create InteliverConfig<pre><code>jsi = require(\"./nodeinteliver\")\n\nconfig = new jsi.InteliverConfig(cloudname=\"your-cloudname\", token=\"your-token\")\n</code></pre>"},{"location":"libraries/javascript/#upload","title":"Upload","text":"<p>To upload your data first set your config object. Then use the following lines:</p> <pre><code>jsi = require(\"./nodeinteliver\")\niu = new jsi.Uploader(config)\nfile_key = iu.upload('your-image.jpg')\n</code></pre> <p>If uploaded successfully you will receive a json file with following format. <pre><code>{\n    'success': True,\n    'message': 'Successfully uploaded.',\n    'resource_key': RETURNED_RESOURCE_KEY\n}\n</code></pre></p> <p><code>resource_key</code> is a unique key which able you to receive your data later. </p>"},{"location":"libraries/javascript/#retrieve-data","title":"Retrieve Data","text":"<p>Using <code>InteliverRetrieve</code> class you can build the URL of the data you need to get from Inteliver.</p> <p>To retrieve your data first set your config object. After setting your config object, build an <code>InteliverRetrieve</code> object.</p> <pre><code>jsi = require(\"./nodeinteliver\")\n\nconfig = new jsi.InteliverConfig(cloudname=your-cloudname, token=your-token)\nrt = new jsi.InteliverRetrieve(config)\n</code></pre> <p>Tip</p> <p>Note that for retrieving data you only need your cloudname to be set.</p> <p>All the modifications are sequentional. </p> <p>For example lets say you want to select the main face in picture resize it to 200 and 200 and keep the original ratio and to crop the image in a rounded shape and change the format to png and build the url. </p> <p>let say your resource image is this one:</p> <p></p> <pre><code>    rt.select_face()\n    rt.select('height', 200)\n    rt.select('width', 200)\n    rt.image_crop(round_crop=True)\n    rt.image_change_format('PNG')\n    url_to_get = rt.build_url(your_resource_key)\n</code></pre> <p>This will build a url like this:</p> <pre><code>\"http://res.inteliver.local/media/v1/yourcloudname/i_c_face,i_w_200,i_h_200,i_o_crop,i_o_rcrop,i_o_format_png/resourcekey.jpg\"\n</code></pre> <p>The image you receive after modification is : </p> <p></p> <p>Info</p> <p>You can find out about the image modification examples at inteliver Examples.</p>"},{"location":"libraries/python/","title":"Python","text":""},{"location":"libraries/python/#inteliver-python-sdk","title":"Inteliver Python SDK","text":"<p>Warning</p> <p>We are updating SDKs to be compatibale with our latest changes.</p> <p>Note</p> <p>Please visit our Github page for more information.</p>"},{"location":"libraries/python/#pyinteliver","title":"PyInteliver","text":"<p>Using our python sdk you can upload, set configs and retrieve your data.</p>"},{"location":"libraries/python/#installation","title":"Installation","text":"<p>This python package is available at PyPI. simply run the following command to be able to use our python API.</p> <pre><code>    pip install pyinteliver\n</code></pre> <p>You can also pull our repository and use the API without any requirements to install. </p> <pre><code>    git pull https://github.com/inteliver/pyinteliver.git\n</code></pre>"},{"location":"libraries/python/#inteliver-configs","title":"Inteliver Configs","text":"<p>After registering in  Inteliver you will have a cloud-name and token. This pair will be used to authenticate you for uploading data or using intelligent service.  To set this in your code simply:</p> Create InteliverConfig<pre><code>from InteliverConfig import InteliverConfig\n\nconfig = InteliverConfig(cloudname=\"your-cloudname\", token=\"your-token\")\n</code></pre>"},{"location":"libraries/python/#upload","title":"Upload","text":"<p>To upload your data first set your config object. Then use the following lines:</p> Upload<pre><code>from Uploader import Uploader\n\nuploader = Uploader(config)\nfile_key = uploader.upload('logo.jpg')\n</code></pre> <p>If uploaded successfully you will receive a json file with following format. <pre><code>{\n    'success': True, \n    'message': 'Successfully uploaded.', \n    'resource_key': RETURNED_RESOURCE_KEY\n}\n</code></pre></p> <p><code>resource_key</code> is a unique key which able you to receive your data later. </p>"},{"location":"libraries/python/#retrieve-data","title":"Retrieve Data","text":"<p>Using <code>InteliverRetrieve</code> class you can build the URL of the data you need to get from Inteliver.</p> <p>To retrieve your data first set your config object. After setting your config object, build an <code>InteliverRetrieve</code> object.</p> Set Config Object<pre><code>from InteliverConfig import InteliverConfig\nfrom InteliverRetrieve import InteliverRetrieve\n\nconfig = InteliverConfig(cloudname=\"your-cloudname\")\nrt = InteliverRetrieve(config)\n</code></pre> <p>Tip</p> <p>Note that for retrieving data you only need your cloudname to be set.</p> <p>All the image modifications are sequentional. </p> <p>for example lets say you want to select the main face in picture resize it to 200 and 200 and keep the original ratio and to crop the image in a rounded shape and change the format to png and build the url. </p> <p>let say your resource image is this one:</p> <p></p> Retrieve Rounded Face Image<pre><code>    rt.select_face()\n    rt.select('height', 200)\n    rt.select('width', 200)\n    rt.image_crop(round_crop=True)\n    rt.image_change_format('PNG')\n    url_to_get = rt.build_url(your_resource_key)\n</code></pre> <p>This will build a url like this:</p> <pre><code>\"http://res.inteliver.local/media/v1/yourcloudname/i_c_face,i_w_200,i_h_200,i_o_crop,i_o_rcrop,i_o_format_png/resourcekey.jpg\"\n</code></pre> <p>The image you receive after modification is : </p> <p></p> <p>Info</p> <p>You can find out about the image modification examples at inteliver Examples.</p>"},{"location":"libraries/react/","title":"React","text":"<p>Note</p> <p>Refer to React Github page for a complete guide on how to use our React SDK.</p> <p>Info</p> <p>You can follow our releases in our   inteliver Github homepage</p>"}]}